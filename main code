// ==UserScript==
// @name         Ultimate Petplay Addon
// @namespace    https://www.bondageprojects.com/
// @version      1.2
// @description  Adds petplay roles, pet lists, linking, and HUD for each account, with memory and emoji indicators.
// @author       kittenzflight
// @match        https://*.bondageprojects.elementfx.com/R*/*
// @match        https://*.bondage-europe.com/R*/*
// @match        https://*.bondageprojects.com/R*/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    const ROLE_KEY = 'UPA_RoleData';
    const PET_KEY = 'UPA_PetLinks';

    const DomSubRoles = { 'Mistress': 'üë†', 'Soft-dom': '‚òÅÔ∏è', 'Owner': 'üîê', 'Trainer': 'üöÇ' };
    const PetSubRoles = { 'Puppy': 'üêï', 'Kitty': 'üêà', 'Bunny': 'üêá', 'Fox': 'ü¶ä', 'Pony': 'üê¥' };

    let UPA = {
        role: null,
        subRole: null,
        pets: [],
        init() {
            this.load();
            this.createHUD();
            if (!this.role || !this.subRole) this.promptRole();
            else this.updateHUD();
            this.listenForCommands();
        },
        load() {
            const id = Player?.MemberNumber;
            if (!id) return;
            const roles = JSON.parse(localStorage.getItem(ROLE_KEY) || '{}');
            const pets = JSON.parse(localStorage.getItem(PET_KEY) || '{}');
            const myData = roles[id];
            if (myData) {
                this.role = myData.role;
                this.subRole = myData.subRole;
            }
            this.pets = pets[id] || [];
        },
        save() {
            const id = Player?.MemberNumber;
            if (!id) return;
            const roles = JSON.parse(localStorage.getItem(ROLE_KEY) || '{}');
            roles[id] = { role: this.role, subRole: this.subRole };
            localStorage.setItem(ROLE_KEY, JSON.stringify(roles));
        },
        savePets() {
            const id = Player?.MemberNumber;
            if (!id) return;
            const pets = JSON.parse(localStorage.getItem(PET_KEY) || '{}');
            pets[id] = this.pets;
            localStorage.setItem(PET_KEY, JSON.stringify(pets));
        },
        promptRole() {
            const role = prompt("Pick role: Pet, Dom, Switch");
            if (!role || !['Pet', 'Dom', 'Switch'].includes(role)) return;
            const subChoices = role === 'Dom' ? Object.keys(DomSubRoles) : Object.keys(PetSubRoles);
            const sub = prompt(`Pick sub-role:\n${subChoices.join(', ')}`);
            if (!sub || !subChoices.includes(sub)) return;
            this.role = role;
            this.subRole = sub;
            this.save();
            this.updateHUD();
        },
        resetRole() {
            const id = Player?.MemberNumber;
            if (!id) return;
            const roles = JSON.parse(localStorage.getItem(ROLE_KEY) || '{}');
            delete roles[id];
            localStorage.setItem(ROLE_KEY, JSON.stringify(roles));
            this.role = null;
            this.subRole = null;
            this.promptRole();
        },
        createHUD() {
            const div = document.createElement('div');
            div.id = 'upa-hud';
            div.style.cssText = `
                position: fixed; top: 150px; left: 20px; background: rgba(0,0,0,0.7); 
                color: white; padding: 10px; font-size: 14px; border: 1px solid #aaa;
                font-family: Arial; z-index: 10000; max-width: 200px; border-radius: 8px;
            `;
            div.innerHTML = `
                <div id="upa-role">Loading role...</div>
                <button id="upa-reset" style="
                    margin-top: 8px;
                    background: #600;
                    color: white;
                    border: none;
                    padding: 4px 8px;
                    border-radius: 6px;
                    font-size: 12px;
                    cursor: pointer;
                ">Reset Role</button>
                <div id="upa-pets" style="margin-top: 10px;"></div>
            `;
            document.body.appendChild(div);
            document.getElementById('upa-reset').addEventListener('click', () => {
                if (confirm("Are you sure you want to reset your role and sub-role?")) {
                    this.resetRole();
                }
            });
        },
        updateHUD() {
            const roleEl = document.getElementById('upa-role');
            const emoji = DomSubRoles[this.subRole] || PetSubRoles[this.subRole] || '';
            roleEl.innerHTML = `Role: ${this.role} ${emoji}<br>Sub: ${this.subRole}`;

            const petsEl = document.getElementById('upa-pets');
            petsEl.innerHTML = `<b>Pets:</b><br>` + (this.pets.length === 0
                ? `<i>None</i>` : this.pets.map(id => `<div>${id}</div>`).join(''));
        },
        listenForCommands() {
            const oldSend = ChatRoomSendChat;
            ChatRoomSendChat = function (msg) {
                if (msg.Content.startsWith("/addpet ")) {
                    const id = parseInt(msg.Content.split(" ")[1]);
                    ServerSend("ChatRoomChat", {
                        Content: `UPA_REQ|${Player.MemberNumber}`,
                        Type: "Whisper", Target: id
                    });
                    return;
                }
                oldSend.call(this, msg);
            };

            const oldReceive = ChatRoomReceiveChat;
            ChatRoomReceiveChat = function (data) {
                if (data.Type === "Whisper" && data.Content.startsWith("UPA_REQ|")) {
                    const requester = parseInt(data.Content.split('|')[1]);
                    const name = `#${requester}`;
                    if (confirm(`${name} wants to become your pet play owner. Accept?`)) {
                        const pets = JSON.parse(localStorage.getItem(PET_KEY) || '{}');
                        const id = Player?.MemberNumber;
                        if (!id) return;
                        if (!pets[requester]) pets[requester] = [];
                        if (!pets[requester].includes(id)) pets[requester].push(id);
                        localStorage.setItem(PET_KEY, JSON.stringify(pets));
                        alert(`You are now owned by ${name}`);
                    }
                    return;
                }
                oldReceive.call(this, data);
            };
        }
    };

    const checkLogin = setInterval(() => {
        if (typeof Player !== "undefined" && Player.MemberNumber) {
            clearInterval(checkLogin);
            setTimeout(() => UPA.init(), 200);
        }
    }, 1000);
})();
