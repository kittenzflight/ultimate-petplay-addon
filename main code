// ==UserScript==
// @name         Ultimate Petplay Addon
// @namespace    https://www.bondageprojects.com/
// @version      1.0
// @description  Adds petplay roles, ownership, tasks, and HUD for Bondage Club
// @author       kittenzflight
// @match        https://*.bondageprojects.elementfx.com/R*/*
// @match        https://*.bondage-europe.com/R*/*
// @match        https://*.bondageprojects.com/R*/*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // --- Constants ---
    const ROLE_EMOJIS = {
        'Mistress': 'üë†',
        'Soft-dom': '‚òÅÔ∏è',
        'Owner': 'üîê',
        'Trainer': 'üöÇ',
        'Puppy': 'üêï',
        'Kitty': 'üêà',
        'Bunny': 'üêá',
        'Fox': 'ü¶ä',
        'Pony': 'üê¥',
    };

    let hudDiv, roleData = {}, petList = [];

    // --- Load Stored Data ---
    function loadRoleData() {
        const saved = localStorage.getItem(`UPA_RoleData_${Player.MemberNumber}`);
        if (saved) roleData = JSON.parse(saved);
    }

    function saveRoleData() {
        localStorage.setItem(`UPA_RoleData_${Player.MemberNumber}`, JSON.stringify(roleData));
    }

    // --- HUD Creation ---
    function createHUD() {
        if (document.getElementById("UPA-HUD")) return;

        hudDiv = document.createElement("div");
        hudDiv.id = "UPA-HUD";
        hudDiv.style.position = "fixed";
        hudDiv.style.top = "50px";
        hudDiv.style.left = "50px";
        hudDiv.style.zIndex = 10000;
        hudDiv.style.background = "rgba(20,20,20,0.9)";
        hudDiv.style.color = "white";
        hudDiv.style.padding = "10px";
        hudDiv.style.borderRadius = "8px";
        hudDiv.style.minWidth = "200px";
        hudDiv.style.fontFamily = "Arial";

        updateHUDContent();
        document.body.appendChild(hudDiv);
        makeDraggable(hudDiv);
    }

    // --- HUD Content ---
    function updateHUDContent() {
        hudDiv.innerHTML = '';

        if (!roleData.role) {
            const rolePrompt = document.createElement("div");
            rolePrompt.innerHTML = `
                <strong>Choose Role:</strong><br>
                <button onclick="window.UPA_selectRole('Dom')">Dom</button>
                <button onclick="window.UPA_selectRole('Pet')">Pet</button>
                <button onclick="window.UPA_selectRole('Switch')">Switch</button>
            `;
            hudDiv.appendChild(rolePrompt);
            return;
        }

        const roleLabel = document.createElement("div");
        roleLabel.innerHTML = `Role: <strong>${roleData.role}</strong>`;
        hudDiv.appendChild(roleLabel);

        const subRole = document.createElement("div");
        subRole.innerHTML = `Sub-role: <strong>${roleData.subRole || 'None'} ${ROLE_EMOJIS[roleData.subRole] || ''}</strong>`;
        hudDiv.appendChild(subRole);

        if (roleData.role === 'Dom' || roleData.role === 'Switch') {
            const petListLabel = document.createElement("div");
            petListLabel.innerHTML = "<hr><strong>Leashed Pets:</strong><br>";
            hudDiv.appendChild(petListLabel);

            petList.forEach(pet => {
                const petItem = document.createElement("div");
                petItem.innerText = pet.Name;
                petItem.style.cursor = "pointer";
                petItem.onclick = () => alert(`Future Rule Dialog for ${pet.Name}`);
                hudDiv.appendChild(petItem);
            });
        }
    }

    // --- Select Role ---
    window.UPA_selectRole = function (role) {
        if (!roleData.role) {
            roleData.role = role;
            if (role === 'Dom' || role === 'Switch') roleData.subRole = 'Mistress';
            if (role === 'Pet') roleData.subRole = 'Kitty';
            saveRoleData();
            updateHUDContent();
        }
    };

    // --- Ownership System ---
    function handleAddPetCommand(command) {
        const args = command.split(' ');
        if (args[0] === '/addpet' && args[1]) {
            const targetID = parseInt(args[1]);
            const target = Player.See.find(p => p.MemberNumber === targetID);
            if (!target) return;
            ServerSend("ChatWhisper", {
                Target: target.MemberNumber,
                Content: `(UPA) ${Player.Name} wants to become your pet play owner. Type /acceptpet or /declinepet.`
            });
        }

        if (command === '/acceptpet') {
            petList.push({ MemberNumber: ChatRoomTargetMemberNumber, Name: CharacterNickname(ChatRoomTarget) });
            updateHUDContent();
        }

        if (command === '/declinepet') {
            ChatRoomMessage({ Content: "(UPA) You declined the ownership request." });
        }
    }

    // --- Draggable HUD ---
    function makeDraggable(element) {
        let isDragging = false, offsetX, offsetY;

        element.onmousedown = e => {
            isDragging = true;
            offsetX = e.clientX - element.offsetLeft;
            offsetY = e.clientY - element.offsetTop;
            document.onmousemove = dragMouseMove;
            document.onmouseup = stopDragging;
        };

        function dragMouseMove(e) {
            if (!isDragging) return;
            element.style.left = e.clientX - offsetX + 'px';
            element.style.top = e.clientY - offsetY + 'px';
        }

        function stopDragging() {
            isDragging = false;
            document.onmousemove = null;
            document.onmouseup = null;
        }
    }

    // --- Initialize ---
    function initializeAddon() {
        loadRoleData();
        createHUD();
        ChatRoomMessage({ Content: "(UPA) Ultimate Petplay Addon loaded.", Type: "LocalMessage", Sender: Player.MemberNumber });
    }

    // --- Monitor Chat for Commands ---
    const originalChatSend = ChatRoomSendChat;
    ChatRoomSendChat = function () {
        const input = ElementValue("InputChat").trim();
        if (input.startsWith('/addpet') || input === '/acceptpet' || input === '/declinepet') {
            handleAddPetCommand(input);
            ElementValue("InputChat", "");
            return;
        }
        originalChatSend();
    };

    // Wait for login
    const loginCheck = setInterval(() => {
        if (typeof Player !== 'undefined' && Player.MemberNumber) {
            clearInterval(loginCheck);
            initializeAddon();
        }
    }, 1000);
})();

